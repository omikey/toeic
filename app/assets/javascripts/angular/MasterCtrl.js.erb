app.controller("MasterCtrl", ['$rootScope', '$scope', '$timeout', 'Dashboard', 'SignOut', 'SignIn', 'GetProfile', function ($rootScope, $scope, $timeout, Dashboard, SignOut, SignIn, GetProfile) {
$scope.data = [];
    $scope.loginId = '';
    $scope.loginPass = '';
    $scope.loggedIn = 0;
    $scope.login = 'nobody';
    var clock = 0;

    $scope.$on('Dashboard', function (event, arg) {
        $('.tabs').css('background-color', '#262626');
        $('td[name="Dashboard"]').css('background-color', 'gray');
        var getSlider = $('#Dashboard');
        $('.sliders').not(getSlider).fadeOut(500);
        getSlider.fadeIn(500);
        getSlider.css('top', '0');
    });

    $scope.focusTab = function (event) {
        $('.tabs').css('background-color', '#262626');
        $(event.target).css('background-color', 'gray');
        var getSlider = $('#' + $(event.target).attr('name'));
        $('.sliders').not(getSlider).fadeOut(500);
        $rootScope.$broadcast($(event.target).attr('name'), 'fadeIn');
        getSlider.fadeIn(500);
        getSlider.css('top', '0');
    };

    $scope.getTab = function (event) {
        $('.tabs').css('background-color', '#262626');
        $(event.target).css('background-color', 'gray');
        var getSlider = $(parseInt($(event.target).attr('name')) < 8 ? '#Dashboard' : '#Community');
        $('.sliders').not(getSlider).fadeOut(500);
        $rootScope.$broadcast($(event.target).attr('name'), 'fadeIn');
        getSlider.fadeIn(500);
        getSlider.css('top', '0');
    };

    $scope.alert = function (message) {
        clock++;
        if (clock == 6) {
            if (message) {
                $scope.messenger(message, 300, 200, "Welcome!", ["Cool!"]);
            }
            $('.sliders').not('#Dashboard').fadeOut(500);
            var dash = $('#Dashboard');
            dash.css('top', '0');

/*            if (($(window).width() > 1200) && ($('body').attr('chrome') == 'true')) {
                var canv = $('canvas').get(0);
                dash.append('<img style="border: solid gray 5px; ' +
                'border-radius: 20px; background-color: #f0f0ff; margin-left: 4em; ' +
                'margin-bottom: 6em; height:25em;" src="' +
                canv.toDataURL() + '" />');
                canv.outerHTML = '';
            }*/

            dash.fadeIn(500);
        }
    };

    $scope.doLogin = function () {
        alert($scope.loginId);
        alert($scope.loginPass);
    };

    $scope.regLog = function (switcher) {
        switch (switcher) {
            case 1:
                register();
                break;
            case 2:
                login();
                break;
            case 3:
                signOut();
                break;
            case 4:
                profile();
                break;
        }
    };

    function signOut() {
        SignOut.get(function()
        {
            // TODO: Remove this
            $(".sliders").fadeOut(1500);
            $.wait(1500).then(function () {
                window.location.href = "https://www.eztoeic.com";
            });
            //

            $('#logger1').css('display','inline-block');
            $('#logger2').css('display','inline-block');
            $('#logger3').css('display','none');
            $('#logger4').css('display','none');
            $('#logger4').html('');
        });
    }

    function login() {
        $scope.messenger($('#login').html(), 300, 270, "Sign-in", ["Cancel", "Submit"]);
        $('.ui-button:last').attr('onclick', '$("#mrButton").click()');
        //$('form').attr('onsubmit', '$("#refresh").click()');
    }

    $scope.logMeIn = function ()
    {
        var hashbrowns = {};
        var login = $('input[type="text"].classFun:last');
        var pass = $('input[type="password"].classFun:last');
        hashbrowns["user[login]"] = login.val();
        hashbrowns["user[password]"] = pass.val();

        SignIn.get(hashbrowns,function(resp)
        {
            // TODO: Remove this
            $(".sliders").fadeOut(1500);
            $.wait(1500).then(function () {
                window.location.href = "https://www.eztoeic.com";
            });
            //

            if (resp.login)
            {
                $scope.loggedIn = resp.login;
                $scope.login = $scope.loggedIn['login'];
                $('#logger1').css('display','none');
                $('#logger2').css('display','none');
                $('#logger3').css('display','inline-block');
                $('#logger4').css('display','inline-block');
                $('#logger4').html($scope.login);
            }
            else
            {
                $scope.loggedIn = null;
                $scope.login = 'nobody';
            }
        });
    }

    $.wait = function (ms) {
        var defer = $.Deferred();
        setTimeout(function () {
            defer.resolve();
        }, ms);
        return defer;
    };

    function profile() {
        $scope.messenger($('#register').html(), 380, 500, "Update Your Profile", ["Cancel", "Submit"]);
        $('.ui-button:last').attr('onclick', '$("#updater").click();');
    }

    $scope.updateProfile = function() {
        var inputs = $('form[id^="edit_user"]:last').find('input');
        var hash = {};
        for (var i = 0; i < inputs.length; i++)
        {
            hash[$(inputs.get(i)).attr('name')] = $(inputs.get(i)).val();
        }
        GetProfile.get(hash, function()
        {
            window.location.href = 'https://www.eztoeic.com';
        });
    };

    function register() {
        $scope.messenger($('#register').html(), 380, 500, "Register for free!", ["Cancel", "Submit"]);
        $('.ui-button:last').attr('onclick', '$("input:last").click()');
        $('form').attr('onsubmit', '$("#verify").click()');
    }

    $scope.$on('Messenger', function (event, arg) {
        var fullSize = $('#Part1').find('#fullSize');
        $scope.messenger(fullSize.html(), 1067, 625, "Expanded View", ["Close"]);
        $('#message').css('text-align','');
        $('#message').find('#gameBox0').css('top','');
        $('#message').find('#gameBox1').css('top','');
        $('#message').find('#gameBox0').css('width','');
        $('#message').find('#gameBox1').css('width','');
    });

    $scope.messenger = function (message, x, y, title, array) {
        $('#message').html(message);
        var dialogConfirm = $('#dialog-confirm');
        dialogConfirm.attr('title', title);
        $('#ui-id-1').html(title);
        var labelHash = [0];
        for (i in array) {
            labelHash[i] = {
                text: array[i],
                click: function () {
                    $(this).dialog("close");
                }
            };
        }
        dialogConfirm.dialog({
            resizable: false,
            height: y,
            width: x,
            modal: true,
            buttons: labelHash
        });
    };

    function drawLine (context, x1, y1, x2, y2, first)
    {
        var x, y;
        var lastX, lastY;
        lastX = x1;
        lastY = y1;
        context.moveTo(x1, y1);
        for (var i = 1; i <= 10; i++)
        {
            x = ((x1 * i) + (x2 * (100 - i)))/100.0;
            y = ((y1 * i) + (y2 * (100 - i)))/100.0;
            drawLine2 (context, lastX, lastY, x, y, first);
            lastX = x;
            lastY = y;
        }
    }

    function drawLine2 (context, x1, y1, x2, y2, first)
    {
        var c = (x1 + x2) / 2;
        var d = (y1 + y2) / 2;
        if (!first)
        {
            context.quadraticCurveTo(x1, y1, c, d);
            context.quadraticCurveTo(c, d, x2, y2);
        }
        else
        {
            drawLine(context, x1, y1, c, d, false);
            drawLine(context, c, d, x2, y2, false);
        }
    }

angular.element(document).ready(function() {
    Dashboard.get(function (resp) {
        $scope.data = resp;

        var cell = (($(window).width() > 1200) && ($('body').attr('chrome') == 'true')) ? 1 : 1;
        $('#thisGraph').attr('width', 620 * cell);
        $('#thisGraph').attr('height', 450 * cell);

        var canvas = $('#thisGraph').get(0);

        var context = canvas ? canvas.getContext('2d') : null;
        context.clearRect(0, 0, canvas.width, canvas.height);
        var centerX = canvas.width / 2;
        var centerY = canvas.height / 2;
        var radius = 200 * cell;
        context.lineWidth = 3 * cell;
        context.strokeStyle = '#000000';
        context.lineCap = 'round';
        context.lineJoin = 'round';

        for (var i = 0; i < 7; i++) {
            context.beginPath();
            context.arc(centerX, centerY, radius, 1.5 * Math.PI + (((2.0/7.0) * Math.PI) * i), 1.5 * Math.PI + (((2.0/7.0) * Math.PI) * (i + 1)), false);
            context.lineTo(centerX, centerY);
            context.stroke();
            context.closePath();
        }

        context.font = "" + (20 * cell) + "px Arial";
        context.fillText("Previous", 520 * cell, 30 * cell);
        context.fillText("Now", 520 * cell, 60 * cell);

        var cos = 0.62348980185873353052500488400424;
        var sin = 0.78183148246802980870844452667406;
        var greenX = [7];
        var greenY = [7];
        var blueX = [7];
        var blueY = [7];
        var newX = centerX;
        var newY = centerY - radius;
        var oldX;
        var oldY;
        greenX[0] = newX;
        greenY[0] = newY;
        blueX[0] = newX;
        blueY[0] = newY;

        for (var i = 0; i < 6; i++) {
            oldX = newX - centerX;
            oldY = newY - centerY;
            newX = centerX + (oldX * cos) - (oldY * sin);
            newY = centerY + (oldX * sin) + (oldY * cos);
            greenX[i + 1] = newX;
            greenY[i + 1] = newY;
            blueX[i + 1] = newX;
            blueY[i + 1] = newY;
        }

        for (var i = 0; i < 4; i++)
        {
            var myPart = $scope.data.listening[i].score;
            var yourPart = 100 - myPart;
            greenX[(i + 7) % 7] = ((greenX[(i + 7) % 7] * myPart) + (centerX * yourPart)) / 100;
            greenY[(i + 7) % 7] = ((greenY[(i + 7) % 7] * myPart) + (centerY * yourPart)) / 100;
        }
        for (var i = 0; i < 3; i++)
        {
            var myPart = $scope.data.reading[i].score;
            var yourPart = 100 - myPart;
            greenX[(i + 4) % 7] = ((greenX[(i + 4) % 7] * myPart) + (centerX * yourPart)) / 100;
            greenY[(i + 4) % 7] = ((greenY[(i + 4) % 7] * myPart) + (centerY * yourPart)) / 100;
        }
        context.font = "" + (16 * cell) + "px Arial";
        var xshift = [-20 * cell, 5 * cell, 8 * cell, -10 * cell, -30 * cell, -50 * cell, -45 * cell];
        var yshift = [-7 * cell, -5 * cell, 10 * cell, 25 * cell, 25 * cell, 10 * cell, -5 * cell];
        for (var i = 0; i < 7; i++)
        {
            context.fillText("Part " + ((i) % 7 + 1), blueX[i % 7] + xshift[i], blueY[i % 7] + yshift[i]);

            var myPart = $scope.data.improvement[i];
            var yourPart = 100 - myPart;
            blueX[i%7] = ((blueX[i%7] * myPart) + (centerX * yourPart)) / 100;
            blueY[i%7] = ((blueY[i%7] * myPart) + (centerY * yourPart)) / 100;
        }

        context.strokeStyle = '#3350D8';
        context.lineTo(centerX, centerY);
        context.beginPath();
        context.translate(0.5,0.5);
        for (var i = 0; i < 8; i++) {
            drawLine(context, blueX[i % 7], blueY[i % 7], blueX[(i+1) % 7], blueY[(i+1) % 7], i==0);
//            context.lineTo(blueX[i % 7], blueY[i % 7]);
  //          context.stroke();
        }
        context.stroke();
        context.closePath();

        context.strokeStyle = '#8e3931';
        context.lineTo(centerX, centerY);
        context.beginPath();
        context.stroke();
        for (var i = 0; i < 8; i++) {
            drawLine(context, greenX[i % 7], greenY[i % 7], greenX[(i+1) % 7], greenY[(i+1) % 7], i==0);
        }
        context.stroke();
        context.closePath();

        for (var i = 0; i < 2; i++)
        {
            context.strokeStyle = ['#3350D8', '#8e3931'][i];
            context.beginPath();
            context.lineTo(490 * cell, 15 * cell + (30 * cell * i));
            context.stroke();
            context.lineTo(510 * cell, 15 * cell + (30 * cell * i));
            context.stroke();
            context.lineTo(510 * cell, 30 * cell + (30 * cell * i));
            context.stroke();
            context.lineTo(490 * cell, 30 * cell + (30 * cell * i));
            context.stroke();
            context.lineTo(490 * cell, 15 * cell + (30 * cell * i));
            context.stroke();
            context.closePath();
        }

        var xLines = [10];
        var yLines = [10];
        var xLine = [10];
        var yLine = [10];
        context.strokeStyle = "#000000";
        context.font = "" + (10 * cell) + "px Arial";
        for (var i = 0; i < 5; i++) {
            xLines[0 + (2 * i)] = centerX - 5 * cell;
            yLines[0 + (2 * i)] = centerY - (40 * cell * (i + 1));
            xLines[1 + (2 * i)] = centerX + 5 * cell;
            yLines[1 + (2 * i)] = centerY - (40 * cell * (i + 1));
            xLine[i] = centerX;
            yLine[i] = centerY - (40 * (i + 1));
            context.fillText("" + ((i + 1) * 20), centerX + 8 * cell + (i == 4 ? -3 * cell : 0), centerY - (40 * cell * (i + 1)) + 5 * cell + (i == 4 ? 7 * cell : 0));
        }
        context.lineWidth = cell;
        for (var i = 0; i < 7; i++) {
            for (var j = 0; j < 4; j++) {
                context.beginPath();
                context.moveTo(xLines[j * 2], yLines[j * 2]);
                context.lineTo(xLines[(j * 2) + 1], yLines[(j * 2) + 1]);
                context.stroke();
                context.closePath();
            }
            for (var j = 0; j < 10; j++) {
                oldX = xLines[j] - centerX;
                oldY = yLines[j] - centerY;
                xLines[j] = centerX + (oldX * cos) - (oldY * sin);
                yLines[j] = centerY + (oldX * sin) + (oldY * cos);
            }
        }
    });
});
}]);